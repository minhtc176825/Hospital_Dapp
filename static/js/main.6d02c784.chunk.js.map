{"version":3,"sources":["config.js","Doctor.js","Patient.js","App.js","serviceWorker.js","index.js"],"names":["HOSPITAL_ABI","Doctor","handleAddDoctor","event","name","document","getElementById","value","age","gender","preventDefault","props","addDoctor","this","doctors","map","doctor","index","id","birth","key","className","style","width","scope","renderDoctorData","type","placeholder","Button","variant","onClick","handleFindDoctor","showDoctorForm","showDoctorData","Component","Patient","handleAddPatient","insuranceCode","medicRecord","addPatient","patients","patient","renderPatientData","showPatientForm","showPatientData","App","state","account","doctorsCount","patientsCount","loading","showDoctor","title","bind","findDoctor","loadBlockchainData","web3","Web3","givenProvider","eth","getAccounts","accounts","setState","hospital","Contract","methods","call","i","send","from","once","receipt","showPatient","href","target","active","role","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6d02c784.chunk.js","sourcesContent":["export const HOSPITAL_ADDRESS = \"0x1b1170999f62091d1d5079cb5f14f1270f19a242\"\r\n\r\nexport const HOSPITAL_ABI = [\r\n  {\r\n    \"inputs\": [],\r\n    \"stateMutability\": \"nonpayable\",\r\n    \"type\": \"constructor\"\r\n  },\r\n  {\r\n    \"anonymous\": false,\r\n    \"inputs\": [\r\n      {\r\n        \"indexed\": false,\r\n        \"internalType\": \"string\",\r\n        \"name\": \"name\",\r\n        \"type\": \"string\"\r\n      },\r\n      {\r\n        \"indexed\": false,\r\n        \"internalType\": \"string\",\r\n        \"name\": \"birth\",\r\n        \"type\": \"string\"\r\n      },\r\n      {\r\n        \"indexed\": false,\r\n        \"internalType\": \"string\",\r\n        \"name\": \"gender\",\r\n        \"type\": \"string\"\r\n      }\r\n    ],\r\n    \"name\": \"addDoctorEvent\",\r\n    \"type\": \"event\"\r\n  },\r\n  {\r\n    \"anonymous\": false,\r\n    \"inputs\": [\r\n      {\r\n        \"indexed\": false,\r\n        \"internalType\": \"string\",\r\n        \"name\": \"name\",\r\n        \"type\": \"string\"\r\n      },\r\n      {\r\n        \"indexed\": false,\r\n        \"internalType\": \"string\",\r\n        \"name\": \"birth\",\r\n        \"type\": \"string\"\r\n      },\r\n      {\r\n        \"indexed\": false,\r\n        \"internalType\": \"string\",\r\n        \"name\": \"gender\",\r\n        \"type\": \"string\"\r\n      },\r\n      {\r\n        \"indexed\": false,\r\n        \"internalType\": \"string\",\r\n        \"name\": \"insuranceCode\",\r\n        \"type\": \"string\"\r\n      },\r\n      {\r\n        \"indexed\": false,\r\n        \"internalType\": \"string\",\r\n        \"name\": \"medicRecord\",\r\n        \"type\": \"string\"\r\n      }\r\n    ],\r\n    \"name\": \"addPatientEvent\",\r\n    \"type\": \"event\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"string\",\r\n        \"name\": \"_name\",\r\n        \"type\": \"string\"\r\n      },\r\n      {\r\n        \"internalType\": \"string\",\r\n        \"name\": \"_birth\",\r\n        \"type\": \"string\"\r\n      },\r\n      {\r\n        \"internalType\": \"string\",\r\n        \"name\": \"_gender\",\r\n        \"type\": \"string\"\r\n      }\r\n    ],\r\n    \"name\": \"addDoctor\",\r\n    \"outputs\": [],\r\n    \"stateMutability\": \"nonpayable\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"string\",\r\n        \"name\": \"_name\",\r\n        \"type\": \"string\"\r\n      },\r\n      {\r\n        \"internalType\": \"string\",\r\n        \"name\": \"_birth\",\r\n        \"type\": \"string\"\r\n      },\r\n      {\r\n        \"internalType\": \"string\",\r\n        \"name\": \"_gender\",\r\n        \"type\": \"string\"\r\n      },\r\n      {\r\n        \"internalType\": \"string\",\r\n        \"name\": \"_insuranceCode\",\r\n        \"type\": \"string\"\r\n      },\r\n      {\r\n        \"internalType\": \"string\",\r\n        \"name\": \"_medicRecord\",\r\n        \"type\": \"string\"\r\n      }\r\n    ],\r\n    \"name\": \"addPatient\",\r\n    \"outputs\": [],\r\n    \"stateMutability\": \"nonpayable\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"uint8\",\r\n        \"name\": \"\",\r\n        \"type\": \"uint8\"\r\n      }\r\n    ],\r\n    \"name\": \"doctors\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"uint8\",\r\n        \"name\": \"id\",\r\n        \"type\": \"uint8\"\r\n      },\r\n      {\r\n        \"internalType\": \"string\",\r\n        \"name\": \"name\",\r\n        \"type\": \"string\"\r\n      },\r\n      {\r\n        \"internalType\": \"string\",\r\n        \"name\": \"birth\",\r\n        \"type\": \"string\"\r\n      },\r\n      {\r\n        \"internalType\": \"string\",\r\n        \"name\": \"gender\",\r\n        \"type\": \"string\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [],\r\n    \"name\": \"doctorsCount\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"uint8\",\r\n        \"name\": \"\",\r\n        \"type\": \"uint8\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"uint8\",\r\n        \"name\": \"_id\",\r\n        \"type\": \"uint8\"\r\n      }\r\n    ],\r\n    \"name\": \"findDoctor\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"uint8\",\r\n        \"name\": \"\",\r\n        \"type\": \"uint8\"\r\n      },\r\n      {\r\n        \"internalType\": \"string\",\r\n        \"name\": \"\",\r\n        \"type\": \"string\"\r\n      },\r\n      {\r\n        \"internalType\": \"string\",\r\n        \"name\": \"\",\r\n        \"type\": \"string\"\r\n      },\r\n      {\r\n        \"internalType\": \"string\",\r\n        \"name\": \"\",\r\n        \"type\": \"string\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"uint8\",\r\n        \"name\": \"\",\r\n        \"type\": \"uint8\"\r\n      }\r\n    ],\r\n    \"name\": \"patients\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"uint8\",\r\n        \"name\": \"id\",\r\n        \"type\": \"uint8\"\r\n      },\r\n      {\r\n        \"internalType\": \"string\",\r\n        \"name\": \"name\",\r\n        \"type\": \"string\"\r\n      },\r\n      {\r\n        \"internalType\": \"string\",\r\n        \"name\": \"birth\",\r\n        \"type\": \"string\"\r\n      },\r\n      {\r\n        \"internalType\": \"string\",\r\n        \"name\": \"gender\",\r\n        \"type\": \"string\"\r\n      },\r\n      {\r\n        \"internalType\": \"string\",\r\n        \"name\": \"insuranceCode\",\r\n        \"type\": \"string\"\r\n      },\r\n      {\r\n        \"internalType\": \"string\",\r\n        \"name\": \"medicRecord\",\r\n        \"type\": \"string\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [],\r\n    \"name\": \"patientsCount\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"uint8\",\r\n        \"name\": \"\",\r\n        \"type\": \"uint8\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  }\r\n]","import React, { Component } from 'react'\r\nimport { Form, Button } from 'react-bootstrap'\r\n\r\nclass Doctor extends Component {\r\n\r\n\trenderDoctorData() {\r\n\r\n\t\treturn this.props.doctors.map((doctor, index) => {\r\n\t\t\tconst { id, name, birth, gender } = doctor\r\n\t\t\t\r\n\t\t\treturn (\r\n\t\t\t\t<tr key={id}>\r\n\t\t\t\t\t<td>{id}</td>\r\n\t\t\t\t\t<td>{name}</td>\r\n\t\t\t\t\t<td>{birth}</td>\r\n\t\t\t\t\t<td>{gender}</td>\r\n\t\t\t\t</tr>\r\n\t\t\t)\r\n\t\t})\r\n\t}\r\n\r\n\tshowDoctorData() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h1>Doctor Data</h1>\r\n\t\t\t\t<table id=\"doctor-table\" className=\"table\" style={{width : \"50em\"}}>\r\n\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th scope=\"col\">#</th>\r\n\t\t\t\t\t\t\t<th scope=\"col\">Name</th>\r\n\t\t\t\t\t\t\t<th scope=\"col\">Date of birth</th>\r\n\t\t\t\t\t\t\t<th scope=\"col\">Gender</th>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</thead>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t{ this.renderDoctorData() }\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n\tshowDoctorForm() {\r\n\t    return (\r\n\t      <div style={{width: \"50em\"}}>\r\n\t        <form>\r\n\t          <fieldset>\r\n\t              <legend>Doctor ID</legend><input className=\"form-control\" type=\"text\" id=\"id-input-doctor\" placeholder=\"You do not need to enter this field when submitting new data.\" />\r\n\t              <legend>Doctor name</legend><input className=\"form-control\" type=\"text\" id=\"name-input-doctor\" placeholder=\"Ex: Dao Hong Quan\" />\r\n\t              <legend>Birthday</legend><input className=\"form-control\" type=\"date\" id=\"age-input-doctor\" />\r\n\t              <legend>Gender</legend><input className=\"form-control\" type=\"text\" id=\"gender-input-doctor\" placeholder=\"Male or Female\"/>\r\n\t          </fieldset>\r\n\t          <Button variant=\"primary\" type=\"button\" onClick={this.handleAddDoctor}>Add</Button>\r\n\t          <Button variant=\"primary\" type=\"button\" onClick={this.handleFindDoctor}>Find</Button>\r\n\t        </form>\r\n\t      </div>\r\n      )\r\n  }\r\n\r\n  handleAddDoctor = (event) => {\r\n  \tvar name = document.getElementById(\"name-input-doctor\").value\r\n    var age = document.getElementById(\"age-input-doctor\").value\r\n    var gender = document.getElementById(\"gender-input-doctor\").value\r\n\r\n    event.preventDefault()\r\n    this.props.addDoctor(name, age, gender)\r\n  }\r\n\r\n  render() {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{ this.showDoctorForm() }\r\n\t\t\t{ this.showDoctorData() }\r\n\t\t</div>\r\n\t)\r\n  }\r\n}\r\n\r\nexport default Doctor","import React, { Component } from 'react'\r\nimport { Form, Button } from 'react-bootstrap'\r\n\r\nclass Patient extends Component {\r\n\r\n\trenderPatientData() {\r\n\t\treturn this.props.patients.map((patient, index) => {\r\n\t\t\tconst { id, name, birth, gender, insuranceCode, medicRecord } = patient\r\n\t\t\treturn (\r\n\t\t\t\t<tr key={id}>\r\n\t\t\t\t\t<td>{id}</td>\r\n\t\t\t\t\t<td>{name}</td>\r\n\t\t\t\t\t<td>{birth}</td>\r\n\t\t\t\t\t<td>{gender}</td>\r\n\t\t\t\t\t<td>{insuranceCode}</td>\r\n\t\t\t\t\t<td>{medicRecord}</td>\r\n\t\t\t\t</tr>\r\n\t\t\t\t)\r\n\t\t})\r\n\t}\r\n\r\n\tshowPatientData() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h1>Patient Data</h1>\r\n\t\t\t\t<table className=\"table\" style={{width : \"50em\"}}>\r\n\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th scope=\"col\">#</th>\r\n\t\t\t\t\t\t\t<th scope=\"col\">Name</th>\r\n\t\t\t\t\t\t\t<th scope=\"col\">Date of birth</th>\r\n\t\t\t\t\t\t\t<th scope=\"col\">Gender</th>\r\n\t\t\t\t\t\t\t<th scope=\"col\">Insurance Code</th>\r\n\t\t\t\t\t\t\t<th scope=\"col\">Medical Record</th>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</thead>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t{ this.renderPatientData() }\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n\tshowPatientForm() {\r\n\t    return (\r\n\t      <div style={{width: \"50em\"}}>\r\n\t        <form>\r\n\t          <fieldset>\r\n\t              <legend>Patient ID</legend><input className=\"form-control\" type=\"text\" id=\"id-input-doctor\" placeholder=\"You do not need to enter this field when submitting new data.\" />\r\n\t              <legend>Patient name</legend><input className=\"form-control\" type=\"text\" id=\"name-input-doctor\" placeholder=\"Ex: Dao Hong Quan\" />\r\n\t              <legend>Date of Birth</legend><input className=\"form-control\" type=\"date\" id=\"age-input-doctor\" />\r\n\t              <legend>Gender</legend><input className=\"form-control\" type=\"text\" id=\"gender-input-doctor\" placeholder=\"Male or Female\"/>\r\n\t              <legend>Insurance Code</legend><input className=\"form-control\" type=\"text\" id=\"code-input-doctor\" />\r\n\t              <legend>Medical Record</legend><input className=\"form-control\" type=\"text\" id=\"record-input-doctor\" />\r\n\t          </fieldset>\r\n\t          <Button variant=\"primary\" type=\"button\" onClick={this.handleAddPatient}>Add</Button>\r\n\t          <Button variant=\"primary\" type=\"button\" onClick={this.handleFindDoctor}>Find</Button>\r\n\t        </form>\r\n\t      </div>\r\n      )\r\n  }\r\n\r\n  \thandleAddPatient = (event) => {\r\n\t\tvar name = document.getElementById(\"name-input-doctor\").value\r\n\t\tvar age = document.getElementById(\"age-input-doctor\").value\r\n\t\tvar gender = document.getElementById(\"gender-input-doctor\").value\r\n\t\tvar insuranceCode = document.getElementById(\"code-input-doctor\").value\r\n\t\tvar medicRecord = document.getElementById(\"record-input-doctor\").value\r\n\r\n\t\tevent.preventDefault()\r\n\t\tthis.props.addPatient(name, age, gender, insuranceCode, medicRecord)\r\n  }\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t{ this.showPatientForm() }\r\n\t\t\t\t{ this.showPatientData() }\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Patient","import React, { Component } from 'react';\nimport Web3 from 'web3'\nimport './App.css';\nimport { HOSPITAL_ABI, HOSPITAL_ADDRESS } from './config';\nimport Doctor from './Doctor';\nimport Patient from './Patient';\nimport {Button} from 'react-bootstrap'\n\nclass App extends Component {\n  componentWillMount() {\n    this.loadBlockchainData()\n  }\n\n  async loadBlockchainData() {\n    const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\")\n    //const network = await web3.eth.net.getNetworkType()\n    const accounts = await web3.eth.getAccounts()\n    this.setState({ account: accounts[0] })\n    \n    const hospital = new web3.eth.Contract(HOSPITAL_ABI, HOSPITAL_ADDRESS)\n    this.setState({ hospital })\n    \n    const doctorsCount = await hospital.methods.doctorsCount().call()\n    this.setState({ doctorsCount })\n\n    const patientsCount = await hospital.methods.patientsCount().call()\n    this.setState({ patientsCount })\n\n    for (var i = 1; i <= doctorsCount; i++) {\n      const doctor = await hospital.methods.doctors(i).call()\n      this.setState({\n        doctors: [...this.state.doctors, doctor]\n      })\n    }\n\n\n    for (var i = 1; i <= patientsCount; i++) {\n      const patient = await hospital.methods.patients(i).call()\n      this.setState({\n        patients: [...this.state.patients, patient]\n      })\n    }\n\n    this.setState({ loading: false })\n\n\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = { \n      account: '',\n      doctorsCount: 0,\n      patientsCount: 0,\n      doctors: [],\n      patients: [],\n      loading: true,\n      showDoctor: false,\n      title: \"Change to Doctor\"\n      }\n\n    this.addDoctor = this.addDoctor.bind(this)\n    this.addPatient = this.addPatient.bind(this)\n    this.findDoctor = this.findDoctor.bind(this)\n  }\n\n  addDoctor(name, birth, gender) {\n    this.setState({ loading : true })\n    this.state.hospital.methods.addDoctor(name, birth, gender).send({ from: this.state.account })\n    .once('receipt', (receipt) => {\n      this.setState({ loading: false })\n    })\n  }\n\n  addPatient(name, birth, gender, insuranceCode, medicRecord) {\n    this.setState({ loading : true })\n    this.state.hospital.methods.addPatient(name, birth, gender, insuranceCode, medicRecord).send({ from: this.state.account })\n    .once('receipt', (receipt) => {\n      this.setState({ loading: false })\n    })\n  }\n\n  findDoctor(id) {\n    this.setState({ loading: true })\n    this.state.hospital.methods.findDoctor(id).send({ from: this.state.account})\n    .once('receipt', (receipt) => {\n      this.setState({ loading: false })\n    })\n  }\n\n  render() {\n\n    const { showDoctor, showPatient, title } = this.state\n\n    return (\n      <div>\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n          <a className=\"navbar-brand col-sm-3 col-md-2 mr-0\" href=\"http://www.dappuniversity.com/free-download\" target=\"_blank\">Dapp | Hospital Management</a>\n          <ul className=\"navbar-nav px-3\">\n            <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\n              <small><a className=\"nav-link\" href=\"#\"><span id=\"account\"></span></a></small>\n            </li>\n          </ul>\n          <div>\n          <Button id=\"doctor\" variant=\"primary\" active onClick={() => { this.setState({ showDoctor: !this.state.showDoctor});\n                                                                        if (this.state.showDoctor){ this.setState({ title: \"Change to Doctor\"})} else { this.setState({ title: \"Change to Patient\"})} }}>{this.state.title}</Button>\n          <Button variant=\"secondary\" active>Sign out</Button>\n          </div>\n        </nav>\n        <hr />\n        <br />\n        \n\n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 d-flex justify-content-center\">\n\n              { this.state.loading\n                ? <div id=\"loader\" className=\"text-center\"><p>Loading...</p></div>\n                : <div>\n                  { this.state.showDoctor\n                    ? <Doctor doctors={ this.state.doctors } addDoctor={ this.addDoctor} findDoctor={ this.findDoctor }/>\n                    : <Patient patients= { this.state.patients } addPatient={ this.addPatient } />\n                  }\n                  </div>\n              }\n              \n\n\n            </main>\n          </div>\n        </div>\n        <p className=\"text-center\">Your account : {this.state.account}</p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './bootstrap.min.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}